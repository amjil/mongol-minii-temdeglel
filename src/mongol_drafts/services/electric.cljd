(ns mongol-drafts.services.electric
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:mongol_drafts/database/drift/database.dart" :as drift]
   ["package:mongol_drafts/database/electric.dart" :as electric]
   ["package:drift/drift.dart" :as dr]
   [mongol-drafts.states.global :as gs]
   [mongol-drafts.services.pref :as pref]))

(defn init-db []
  (await (drift/initDriftDatabase)))

(def elec (atom nil))

(defn set-electric []
  (let [d (await (init-db))
        notes-electric (await (electric/startElectricDrift "drafts-app" d))
        result (await
                (.get
                 (.customSelect
                  d
                  "SELECT id, name
                   FROM workspaces 
                   WHERE name = 'default'
                   ;")))]
    (if (empty? result)
      (let [uuid (.v4 (uuid/Uuid))
            user-id (.v4 (uuid/Uuid))
            ^#/(List dr/Variable)
            vars (into [] [(dr/Variable uuid) (dr/Variable "default")
                           (dr/Variable user-id)])]
        (await (pref/set-string "userid" user-id))
        (await
         (.customInsert
          d
          "INSERT INTO workspaces (id, name, electric_user_id) values (?, ?, ?)"
          .variables vars))
        (swap! gs/state assoc :workspace {:id uuid :name "default"}))
      (let [workspace (-> result last .-data)]
        (swap! gs/state assoc :workspace {:id (get workspace "id")
                                          :name "default"})))
    ;; (await
    ;;  (.connect notes-electric auth-token))
    ;; (let [shape (await (.syncTable notes-electric (.-tags d)))]
    ;;   (await (.-synced shape)))
    ;; (let [shape (await (.syncTable notes-electric (.-drafts d)))]
    ;;   (await (.-synced shape)))
    ;; (let [shape (await (.syncTable notes-electric (.-draftTags d)))]
    ;;   (await (.-synced shape)))
    ;; (reset! db d)
    (reset! elec notes-electric)))