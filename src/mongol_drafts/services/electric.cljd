(ns mongol-drafts.services.electric
  (:require
   ["package:uuid/uuid.dart" :as uuid]
   ["package:mongol_drafts/database/drift/database.dart" :as drift]
   ["package:mongol_drafts/database/electric.dart" :as electric]
   ["package:electricsql_flutter/drivers/drift.dart" :as electric-drift]
   ["package:drift/drift.dart" :as dr]
   [mongol-drafts.states.global :as gs]
   [mongol-drafts.services.pref :as pref]))

(defn init-db []
  (await (drift/initDriftDatabase)))

(def elec (atom nil))

(defn apply-sync []
  (let [^electric-drift/ElectricClient
        db-electric @elec
        ^drift/AppDatabase db (.-db db-electric)
        token (get-in @gs/state [:profile "token"])]
    (dart:core/print "------- apply-sync -------")
    (await
     (.connect db-electric token))
    (let [shape (await (.syncTable db-electric (.-tags db)))]
      (await (.-synced shape)))
    (let [shape (await (.syncTable db-electric (.-drafts db)))]
      (await (.-synced shape)))
    (let [shape (await (.syncTable db-electric (.-draftTags db)))]
      (await (.-synced shape)))))

(defn set-electric []
  (let [d (await (init-db))
        db-electric (await (electric/startElectricDrift "drafts-app" d))
        result (await
                (.get
                 (.customSelect
                  d
                  "SELECT id, name
                   FROM workspaces 
                   WHERE name = 'default'
                   ;")))]
    (if (empty? result)
      (let [uuid (.v4 (uuid/Uuid))
            user-id (.v4 (uuid/Uuid))
            ^#/(List dr/Variable)
            vars (into [] [(dr/Variable uuid) (dr/Variable "default")
                           (dr/Variable user-id)])]
        (await (pref/set-string "userid" user-id))
        (await
         (.customInsert
          d
          "INSERT INTO workspaces (id, name, electric_user_id) values (?, ?, ?)"
          .variables vars))
        (swap! gs/state assoc :workspace {:id uuid :name "default"}))
      (let [workspace (-> result last .-data)]
        (swap! gs/state assoc :workspace {:id (get workspace "id")
                                          :name "default"})))
    (reset! elec db-electric)
    (dart:core/print "------- set-electric -------")
    (dart:core/print (get-in @gs/state [:profile "token"]))
    (when (not-empty (get-in @gs/state [:profile "token"]))
      (apply-sync))
    ))
    