(ns mongol-drafts.services.pref
  (:require 
   ["package:shared_preferences/shared_preferences.dart" :as sp]))

(defn get-value [info]
  (let [prefs (await (sp.SharedPreferences/getInstance))]
    (condp = (:type info)
      :string (await (.getString prefs (:key info)))
      :int (await (.getInt prefs (:key info)))
      :bool (await (.getBool prefs (:key info)))
      :double (await (.getDouble prefs (:key info)))
      :list (await (.getStringList prefs (:key info))))))

(defn set-value [info]
  (let [prefs (await (sp.SharedPreferences/getInstance))]
    (condp = (:type info)
      :string (await (.setString prefs (:key info) (:value info)))
      :int (await (.setInt prefs (:key info) (:value info)))
      :bool (await (.setBool prefs (:key info) (:value info)))
      :double (await (.setDouble prefs (:key info) (:value info)))
      :list (await (.setStringList prefs (:key info) (:value info))))))

(defn get-string [k]
  (await
   (get-value {:type :string :key k})))

(defn set-string [k v]
  (await
   (set-value {:type :string :key k :value v})))

(defn get-int [k]
  (await
   (get-value {:type :int :key k})))

(defn set-int [k v]
  (await
   (set-value {:type :int :key k :value v})))

(defn get-bool [k]
  (await
   (get-value {:type :bool :key k})))

(defn set-bool [k v]
  (await
   (set-value {:type :bool :key k :value v})))

(defn get-list [k]
  (await
   (get-value {:type :list :key k})))

(defn set-list [k v]
  (await
   (set-value {:type :list :key k :value v})))


(defn remove-value [k]
  (let [prefs (await (sp.SharedPreferences/getInstance))]
    (await (.remove prefs k))))