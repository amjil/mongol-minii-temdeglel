(ns mongol-drafts.services.draft
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:uuid/uuid.dart" :as uuid]
   ["package:mongol_drafts/database/drift/database.dart" :as schema]
   ["package:mongol_drafts/generated/electric/drift_schema.dart" :as drift-schema]
   ["package:electricsql_flutter/drivers/drift.dart" :as electric-drift]
   ["package:drift/drift.dart" :as drift]
   [mongol-drafts.services.electric :as electric]
   [mongol-drafts.services.pref :as pref]))

(defn create-draft [wid ^String v]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        userid (await (pref/get-string "userid"))
        result (await
                (.insertReturning
                 (.into db (.-drafts db))
                 (schema.DraftsCompanion/insert
                  .id (.v4 (uuid/Uuid))
                  .workspaceId wid
                  .electricUserId userid
                  .content (drift/Value v)
                  .flag false
                  .status 0
                  .createdAt (drift/Value (DateTime.now))
                  .updatedAt (drift/Value (DateTime.now)))))]
    (-> result)))

(defn delete-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.go
      (doto (.delete db (.-drafts db))
        (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))))))

(defn update-draft [id ^String content]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion
               .content (drift/Value content)
               .updatedAt (drift/Value (DateTime.now)))))]
    num))

(defn flag-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion .flag (drift/Value true))))]
    num))

(defn unflag-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion .flag (drift/Value false))))]
    num))

(defn recycle-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion .status (drift/Value -1))))]
    num))

(defn archive-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion .status (drift/Value 1))))]
    num))

(defn inbox-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)
        num (await
             (.write
              (doto (.update db (.-drafts db))
                (.where (fn [^drift-schema/Drafts tbl] (.equals (.-id tbl) id))))
              (schema/DraftsCompanion .status (drift/Value 0))))]
    num))
  
(defn list-drafts [tag-in-ids tag-out-ids
                   flag status]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (.customSelect
       db
       (str
        "select *
          from drafts a 
          where 1 = 1 "
        (cond
          (and (empty? tag-in-ids)
               (empty? tag-out-ids))
          ""

          (and (not-empty tag-in-ids) (not-empty tag-out-ids))
          (str
           " and id in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-in-ids)) ")")
           ")"
           " and id not in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-out-ids)) ")")
           ")")

          (not-empty tag-in-ids)
          (str
           " and id in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-in-ids)) ")")
           ")")

          (not-empty tag-out-ids)
          (str
           " and id not in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-out-ids)) ")")
           ")"))
        (if (and (number? flag) (= 1 flag))
          " and flag = 1 "
          " ")
        (if (number? status)
          (str " and status = " status " ")
          " ")
        "
       order by updated_at desc
       ;"))))))

(defn last-draft []
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (.customSelect
       db
       "select *
        from drafts
        order by created_at desc
        limit 1
        ;")))))

(defn get-draft [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (.customSelect
       db
       "select *
        from drafts a 
        where id = ?
        order by id desc
        limit 1
        ;"
       .variables [(drift/Variable id)])))))

(defn query-drafts [word tag-in-ids tag-out-ids
                    flag status]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.get
      (.customSelect
       db
       (str
        "select *
          from drafts a 
          where 1 = 1 "
        (cond
          (and (empty? tag-in-ids)
               (empty? tag-out-ids))
          ""

          (and (not-empty tag-in-ids) (not-empty tag-out-ids))
          (str
           " and id in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-in-ids)) ")")
           ")"
           " and id not in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-out-ids)) ")")
           ")")

          (not-empty tag-in-ids)
          (str
           " and id in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-in-ids)) ")")
           ")")

          (not-empty tag-out-ids)
          (str
           " and id not in 
             (select draft_id from draft_tags 
                where tag_id in "
           (str "(" (clojure.string/join ", " (map #(str "'" % "'") tag-out-ids)) ")")
           ")"))
        (if (and (number? flag) (= 1 flag))
          " and flag = 1 "
          " ")
        (if (number? status)
          (str " and status = " status " ")
          " ")
        (str
         " and content like '%" word "%' ")
        "
         order by updated_at desc
         ;"))))))

(defn update-initial-user [id]
  (let [^electric-drift/ElectricClient
        client @electric/elec
        ^schema/AppDatabase db (.-db client)]
    (await
     (.write
      (doto (.update db (.-drafts db))
        (.where (fn [^drift-schema/Drafts tbl] (.equals (.-electricUserId tbl) id))))
      (schema/DraftsCompanion
       .electricUserId (drift/Value id))))
    (await
     (.write
      (doto (.update db (.-workspaces db))
        (.where (fn [^drift-schema/Workspaces tbl] (.equals (.-electricUserId tbl) id))))
      (schema/WorkspacesCompanion
       .electricUserId (drift/Value id))))
    (await
     (.write
      (doto (.update db (.-tags db))
        (.where (fn [^drift-schema/Tags tbl] (.equals (.-electricUserId tbl) id))))
      (schema/TagsCompanion
       .electricUserId (drift/Value id))))
    (await
     (.write
      (doto (.update db (.-draftTags db))
        (.where (fn [^drift-schema/DraftTags tbl] (.equals (.-electricUserId tbl) id))))
      (schema/DraftTagsCompanion
       .electricUserId (drift/Value id))))))