(ns mongol-drafts.widgets.auth
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [mongol-drafts.services.auth :as auth-service]
   [mongol-drafts.utils.toast :as toast]
   [mongol-drafts.states.global :as gs]))

(declare form-field rounded-button)

(defn login []
  (f/widget
   :context ctx
   :let [w (-> m/MediaQuery (.of ctx) .-size .-width)]
   :get [m/Navigator]
   :managed [email-controller (m/TextEditingController)
             password-controller (m/TextEditingController)]
   (m/Padding 
    .padding (m.EdgeInsets/all 14))
   (m/Column
    .children
    [(form-field email-controller "Email")
     (m/SizedBox .height 10)
     (form-field password-controller "Password")
     (m/SizedBox .height 20)
     (m/Row
      .mainAxisAlignment m.MainAxisAlignment/spaceAround
      .children
      [(m/SizedBox .height 100
                   .width (* 0.5 w)
                   .child
                   (m/GestureDetector
                    .onTap (fn []
                             (.pushNamed navigator "/signup")
                             nil)
                    .child
                    (mgl/MongolRichText
                     .text (m/TextSpan
                            .text "Don't have an account?"
                            .style (m/TextStyle .fontSize 16)
                            .children [(m/TextSpan .text " Sign up"
                                                   .style (m/TextStyle .fontSize 16))]))))
       (rounded-button (fn [] (auth-service/login ctx
                                                  {"email" (.-text email-controller)
                                                   "password" (.-text password-controller)}
                                                  (fn []
                                                    (swap! gs/state assoc :is-loading? false)
                                                    (swap! gs/state assoc :profile-view-index 0)
                                                    (toast/show-toast ctx "yessss"))))
                       "Done")
       (rounded-button (fn []
                         (swap! gs/state assoc :profile-view-index 0))
                       "Back")])])))
                                   
(defn form-field [controller hint-text]
  (m/TextFormField
   .controller controller
   .decoration
   (m/InputDecoration
    .hintText hint-text
    .hintStyle (m/TextStyle .fontSize 14))))

(defn rounded-button [on-tap label]
  (m/InkWell
   .onTap on-tap
   .child (m/Chip
           .label
           (mgl/MongolText label
                           .style (m/TextStyle
                                   .fontSize 16))
           .labelPadding (.symmetric m/EdgeInsets .horizontal 5 .vertical 20))))