(ns mongol-drafts.widgets.button-bar
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart" :as kv]
   [cljd.flutter :as f]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.draft :as draft-state]
   [mongol-drafts.states.tag :as tag-state]
   [mongol-drafts.states.selection :as selection-state]
   [virtual-keyboard.keyboard-action :as keyboard-action]))
   
(defn bar-button [child on-press]
  (f/widget
   :context ctx
   (m/Material
    .color (-> m/Theme (.of ctx) .-scaffoldBackgroundColor)
    .child
    (m/InkWell
     .customBorder (m/CircleBorder)
     .onTap on-press
     .child
     (m/Padding
      .padding (.all m/EdgeInsets 2)
      .child child)))))

(defn topbar []
  (f/widget
   :context ctx
   :watch [{char-count :editor/chars
            word-count :editor/words}
           global-state/state]
   (m/Row
    .mainAxisAlignment m.MainAxisAlignment/spaceAround
    .children
    [(bar-button
      (m/Icon (.article_outlined m/Icons))
      (fn []
        (-> m/Scaffold (.of ctx) (.openDrawer))))
     (bar-button
      (m/Icon (.add m/Icons))
      (fn []
        (draft-state/new-draft)
        (draft-state/focus-on-draft)))
     (bar-button
      (m/Icon (.sell_outlined m/Icons))
      (fn []
        (swap! global-state/state
               assoc
               :tag-viewable
               (not (:tag-viewable @global-state/state)))
        (tag-state/get-draft-tags global-state/state (-> @global-state/state :draft (get "id")))))
     (m/SizedBox .width 20)
     (m/Text
      (str char-count "c" word-count "w"))
     (bar-button
      (m/Icon (.arrow_drop_down m/Icons))
      (fn [] nil))
     (bar-button
      (m/Icon (.search m/Icons))
      (fn []
        (swap! global-state/state assoc :show-search-diaglog true)
        (swap! global-state/state assoc :show-stacked-keyboard true)
        (swap! global-state/state assoc :show-keyboard false)))
     (m/Icon (.view_sidebar_outlined m/Icons))])))



(defn keyboard-close-button [flag]
  (f/widget
   :watch [{show-system-keyboard :show-system-keyboard} global-state/state]
   (kv/KeyboardDismissOnTap
    .dismissOnCapturedTaps true
    .child
    (m/Container
     .height 40
     .child
     (m/GestureDetector
      .child (m/Icon (.keyboard_arrow_down m/Icons))
      .onTap (fn []
               (if (true? flag)
                 (swap! global-state/state
                        assoc
                        :show-keyboard
                        (not (:show-keyboard @global-state/state)))
                 (swap! global-state/state
                        assoc
                        :show-stacked-keyboard
                        (not (:show-stacked-keyboard @global-state/state))))))))))


;;;
(defn keyboard-upper-bar []
  (m/Expanded
   .child
   (m/Row
    .children
    [(keyboard-close-button false)])))

