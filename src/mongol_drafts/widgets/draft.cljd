(ns mongol-drafts.widgets.draft
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:undo_textfield/undo_textfield.dart" :as undo]
   [virtual-keyboard.keyboard :as keyboard]
   [virtual-keyboard.input-control :as control]
   [virtual-keyboard.keyboard-action :as keyboard-action]
   [virtual-keyboard.options :as keyboard-options]
   [mongol-drafts.widgets.button-bar :as button-bar]
   [mongol-drafts.widgets.drawer :as drawer]
   [cljd.flutter :as f]
   [mongol-drafts.widgets.search :as search]
   [mongol-drafts.widgets.tagbar :as tagbar]
   [mongol-drafts.widgets.toolbar :as toolbar]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.draft :as draft-state]
   [menu-bar.menu :as menu]))

(defn widget []
  (f/widget
   :context ctx
   :get [:info]
   :let [w  (-> m/MediaQuery (.of ctx) .-size .-width)
         _ (draft-state/new-draft)]
   :managed [^undo/RedoTextEditController text-controller (undo/RedoTextEditController)]
   :bind {:text-controller text-controller}
   :watch [{:keys [tag-viewable
                   show-keyboard
                   show-stacked-keyboard
                   show-system-keyboard
                   show-search-dialog]
            candidates-list :keyboard/candidates-list}
           global-state/state
           visible control/visible]
   (m/Stack
    .children
    [(m/Scaffold
      .onDrawerChanged
      (fn [c]
        (if (false? c)
          (swap! global-state/state assoc :show-stacked-keyboard false)
          (do
            (swap! global-state/state assoc-in [:drafts :is-end] false)
            (swap! global-state/state assoc-in [:drafts :contents] [])
            (swap! global-state/state assoc :keyboard/candidates-list [])
            (draft-state/query-drafts (:draft-search @global-state/state) true)
            (dart:core/print "onDrawerChanged"))))
      .drawer (drawer/left-drawer)
      .body
      (m/SafeArea
      ;;  .bottom false
       .child
       (m/Column
        .children
        [(button-bar/topbar text-controller)
         (m/Expanded
          .child
          (m/Row
           .children
           [(if (true? tag-viewable)
              (tagbar/tagbar)
              (m/Container))
            (m/Expanded
             .child
             (m/Padding
              .padding (.all m/EdgeInsets 6)
              .child
              (mgl/MongolTextField
               .controller text-controller
               .onChanged (fn [x]
                            (draft-state/update-draft x))
               .onTap (fn [] (swap! global-state/state assoc :show-keyboard true))
               .decoration nil
               .maxLines 1000
               .autofocus true
               .style (m/TextStyle .fontSize 18 .height 1.8))))
            (if (true? show-keyboard)
              (toolbar/toolbar text-controller)
              (m/Container))]))
         (if (and (true? show-keyboard) (false? show-system-keyboard))
           (m/Container
            .color (-> m/Theme (.of ctx) .-colorScheme .-secondaryContainer)
            .child
            (m/SafeArea
             .top false
             .child
             (m/IntrinsicHeight
              .child
              (keyboard/keyboard))))
           (m/Container))])))
     (if (and (true? show-stacked-keyboard) (false? show-system-keyboard))
       (m/Positioned
        .bottom 0
        .left 0
        .right 0
        .child
        (m/IntrinsicHeight
         .child
         (m/Container
          .color (-> m/Theme (.of ctx) .-colorScheme .-secondaryContainer)
          .child
          (m/SafeArea
           .top false
           .child
           (m/Column
            .children
            [(button-bar/keyboard-upper-bar)
             (keyboard/keyboard)])))))
       (m/Container))
     (if (true? show-search-dialog)
       (search/widget)
       (m/Container))
     (m/Positioned
      .bottom (+ keyboard-options/keyboard-default-height 20 (* 4 (+ 4 (:keyboard/row-vertical-padding info))))
      .right (/ w 4)
      .child
      (menu/menu {:bar {:elavation 10
                        :background-color
                        (-> m/Theme (.of ctx) .-colorScheme .-tertiaryContainer)}
                  :item {:on-tap (fn [x] (keyboard-action/on-candidates-clicked x global-state/state))}}
                 candidates-list))])))
