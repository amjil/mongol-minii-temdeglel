(ns mongol-drafts.states.draft
  (:require
   ["package:flutter/material.dart" :as m]
   [mongol-drafts.services.draft :as draft-service]
   [mongol-drafts.states.global :as gs]
   [mongol-drafts.states.counter :as counter-state]))

(defn set-current-draft [controller id]
  (let [result (await (draft-service/get-draft id))
        draft (-> result first .-data)]
    (set! (.-text controller) (get draft "content"))
    (swap! gs/state assoc :draft draft)
    (counter-state/count-contents gs/state (get draft "content"))))

(defn set-current-draft-without-controller [id]
  (let [result (await (draft-service/get-draft id))
        draft (-> result first .-data)]
    (swap! gs/state assoc :draft draft)))

(defn new-draft []
  (let [result (await (draft-service/last-draft))]
    (cond
      (and (not-empty result) (empty? (-> result first .-data (get "content"))))
      (swap! gs/state assoc :draft
             (-> result last .-data))

      :else
      (let [id (await (draft-service/create-draft (-> @gs/state :workspace :id) ""))
            result (-> (draft-service/last-draft) await last .-data)]
        (swap! gs/state assoc :draft result)))))

(defn delete-draft [i]
  (let [id (-> @gs/state :drafts :contents (nth i) (get "id"))]
    (draft-service/delete-draft id)
    (swap! gs/state assoc-in [:drafts :contents]
           (remove #(= id (get % "id"))
                   (get-in @gs/state [:drafts :contents])))))

(defn update-draft [content]
  (let [draft (:draft @gs/state)]
    (await (draft-service/update-draft (get draft "id") content))
    (swap! gs/state assoc :draft
           (doto draft (.update "content" (fn [_] content))))
    (counter-state/count-contents gs/state content)))

(defn list-drafts [state]
  (let [;num (-> @state :drafts :contents count)
        flag (:draft/flag @state)
        status (:draft/status @state)
        drafts (await (draft-service/list-drafts [] [] flag status))]
    (if (empty? drafts)
      (do
        (swap! state assoc-in [:drafts :is-end] true)
        (swap! state assoc-in [:drafts :contents] []))
      (do
        (swap! state assoc-in [:drafts :is-end] false)
        (swap! state assoc-in [:drafts :contents]
               (concat (get-in @state [:drafts :contents]) (map (fn [x] (.-data x)) drafts)))))))

(defn query-drafts [q has-filter]
  (if (empty? q)
    (let [;num (-> @state :draft :contents count)
          tag-in-ids (map #(get % "id") (:filter-tags @gs/state))
          tag-out-ids (map #(get % "id") (:omitted-tags @gs/state))
          flag (:draft/flag @gs/state)
          status (:draft/status @gs/state)
          drafts (await (draft-service/list-drafts
                         (if has-filter tag-in-ids [])
                         (if has-filter tag-out-ids [])
                         flag status))]
      (if (empty? drafts)
        (do
          (swap! gs/state assoc-in [:drafts :is-end] true)
          (swap! gs/state assoc-in [:drafts :contents] []))
        (do
          (swap! gs/state assoc-in [:drafts :is-end] false)
          (swap! gs/state assoc-in [:drafts :contents]
                 (into [] (map (fn [x] (.-data x)) drafts))))))
    (let [;num (-> @state :draft :contents count)
          tag-in-ids (map #(get % "id") (:filter-tags @gs/state))
          tag-out-ids (map #(get % "id") (:omitted-tags @gs/state))
          flag (:draft/flag @gs/state)
          status (:draft/status @gs/state)
          drafts (await (draft-service/query-drafts
                         q
                         (if has-filter tag-in-ids [])
                         (if has-filter tag-out-ids [])
                         flag status))]
      (if (empty? drafts)
        (do
          (swap! gs/state assoc-in [:drafts :is-end] true)
          (swap! gs/state assoc-in [:drafts :contents] []))
        (do
          (swap! gs/state assoc-in [:drafts :is-end] false)
          (swap! gs/state assoc-in [:drafts :contents]
                 (into [] (map (fn [x] (.-data x)) drafts))))))))

(defn clear-drafts []
  (swap! gs/state assoc-in [:drafts :is-end] false)
  (swap! gs/state assoc-in [:drafts :contents] []))

;;;;;
(defn focus-on-draft [controller]
  (swap! gs/state assoc :show-keyboard true)
  (when (true? (:tag-on-edit @gs/state))
    (swap! gs/state assoc :tag-on-edit false))
  (let [text (-> @gs/state :draft (get "content"))]
    (set! (.-text controller) text))
  (when-not (empty? (:keyboard/candidates-list @gs/state))
    (swap! gs/state assoc :keyboard/candidates-list [])))

(defn initial-states []
  {:tag-viewable false
   :show-keyboard false
   :show-stacked-keyboard false
   :show-drawer-search false
   :show-sub-drawer-search false
   :show-search-dialog false
   :tag-on-edit false
   :current-layout "mn"})

(defn set-draft-search-status [i]
  (when-not (= i (:draft/tabbar-index @gs/state))
    (swap! gs/state assoc :draft/tabbar-index i)
    (condp = i
      ;; Query Inbox drafts
      0
      (do
        (swap! gs/state assoc :draft/flag nil)
        (swap! gs/state assoc :draft/status 0)
        (query-drafts (:draft-search @gs/state) true))

      ;; Query Flaged drafts
      1
      (do
        (swap! gs/state assoc :draft/flag 1)
        (swap! gs/state assoc :draft/status 0)
        (query-drafts (:draft-search @gs/state) true))

      ;; Query Archived drafts
      2
      (do
        (swap! gs/state assoc :draft/flag nil)
        (swap! gs/state assoc :draft/status 1)
        (query-drafts (:draft-search @gs/state) true))

      ;; Query All drafts
      ;; 3
      ;; (do
      ;;   (swap! state assoc :draft/flag nil)
      ;;   (swap! state assoc :draft/status nil)
      ;;   (query-drafts state (:draft-search @state) true))

      ;; Query Deleted drafts
      3
      (do
        (swap! gs/state assoc :draft/flag nil)
        (swap! gs/state assoc :draft/status -1)
        (query-drafts (:draft-search @gs/state) true)))))

(defn toggle-draft-flag [id]
  (let [flag (-> @gs/state :draft (get "flag"))]
    (if (= 1 flag)
      (draft-service/unflag-draft id)
      (draft-service/flag-draft id))
    (swap! gs/state assoc :draft
           (doto
            (-> @gs/state :draft)
             (.update
              "flag"
              (fn [_] (if (= 1 flag) 0 1)))))))

(defn toggle-drafts-item-flag [i]
  (let [draft (-> @gs/state :drafts :contents (nth i))]
    (if (= 1 (get draft "flag"))
      (do
        (draft-service/unflag-draft (get draft "id"))
        (if (= 1 (:draft/tabbar-index @gs/state))
          (swap! gs/state assoc-in [:drafts :contents]
                 (remove #(= (get draft "id") (get % "id"))
                         (get-in @gs/state [:drafts :contents])))
          (swap! gs/state assoc-in [:drafts :contents i]
                 (doto draft (.update "flag" (fn [_] 0))))))
      (do
        (draft-service/flag-draft (get draft "id"))
        (swap! gs/state assoc-in [:drafts :contents i]
               (doto draft (.update "flag" (fn [_] 1))))))))

(defn recycle-draft [i]
  (let [id (-> @gs/state :drafts :contents (nth i) (get "id"))]
    (draft-service/recycle-draft id)
    (swap! gs/state assoc-in [:drafts :contents]
           (remove #(= id (get % "id"))
                   (get-in @gs/state [:drafts :contents])))))

(defn archive-draft [i]
  (let [id (-> @gs/state :drafts :contents (nth i) (get "id"))]
    (draft-service/archive-draft id)
    (swap! gs/state assoc-in [:drafts :contents]
           (remove #(= id (get % "id"))
                   (get-in @gs/state [:drafts :contents])))))

(defn inbox-draft [i]
  (let [id (-> @gs/state :drafts :contents (nth i) (get "id"))]
    (draft-service/inbox-draft id)
    (swap! gs/state assoc-in [:drafts :contents]
           (remove #(= id (get % "id"))
                   (get-in @gs/state [:drafts :contents])))))

