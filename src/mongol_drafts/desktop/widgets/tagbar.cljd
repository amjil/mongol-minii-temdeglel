(ns mongol-drafts.desktop.widgets.tagbar
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter :as f]
   [mongol-drafts.states.global :as global-state]
   [mongol-drafts.states.tag :as tag-state]
   [mongol-drafts.states.draft :as draft-state]))

(defn tag-text-button [text on-press]
  (f/widget
   (m/Material
    .borderRadius (.circular m/BorderRadius 10)
    ;; .color (-> m.Colors/blueGrey .-shade200)
    )
   (m/InkWell
    .customBorder (m/CircleBorder)
    .onTap on-press)
   (m/Padding
    .padding (.all m/EdgeInsets 6))
   (m/Row
    .children [(m/Column
                .children
                [(m/Icon (.remove_circle m/Icons)
                         .size 14)
                 (m/SizedBox .height 4)
                 (m/RotatedBox
                  .quarterTurns 1
                  .child (m/Text text))
                 (m/SizedBox .height 4)])])))

(defn tagbar []
  (f/widget
   :context ctx
   :managed [focus (m/FocusNode)
             ^m/TextEditingController controller (m/TextEditingController)]
   :watch [{{flag "flag"} :draft
            :keys [tag-on-edit
                   draft-tags
                   draft]} global-state/state]
   (m/Container
    .height double/infinity)
   (m/Padding
    .padding (.all m/EdgeInsets 4))
   (m/SingleChildScrollView
    .scrollDirection m.Axis/vertical)
   (m/Wrap
    .crossAxisAlignment m.WrapCrossAlignment/center
    .direction m.Axis/vertical
    .spacing 5
    .children
    (concat
     [(m/Material
       .shape (m/CircleBorder
               .side (m/BorderSide
                      .width 1))
       .child
       (m/InkWell
        .customBorder (m/CircleBorder)
        .onTap (fn []
                 (dart:core/print "tag button >>.")
                 (draft-state/toggle-draft-flag (get draft "id")))
        .child
        (m/Padding
         .padding (.all m/EdgeInsets 2)
         .child (m/Icon (.flag m/Icons)
                        .color (if (= 1 flag)
                                 m.Colors/green
                                 nil)))))
      (m/SizedBox .height 4)
      (m/IntrinsicHeight
       .child
       (m/Container
        .constraints (m/BoxConstraints .minHeight 50)
        .alignment m.Alignment/center
        .decoration (m/BoxDecoration
                     .borderRadius
                     (.all m/BorderRadius (.circular m/Radius 10))
                     .border
                     (.all m/Border .width 0.8))
        .child
        (m/Padding
         .padding (.all m/EdgeInsets 5)
         .child
         (if (true? tag-on-edit)
           (mgl/MongolTextField
            .focusNode focus
            .onChanged (fn [x] 
                         (when (and (not-empty x) (.endsWith x "\n"))
                           (let [text (.substring x 0
                                                  (dec (.-length x)))]
                             (tag-state/add-draft-tag text)
                             (swap! global-state/state assoc :tag-on-edit false)
                             (.clear controller))))
            .controller controller
            .style (m/TextStyle .fontSize 14)
            .maxLines 2
            .minLines 1
            .decoration nil)
           (m/GestureDetector
            .onTap (fn []
                     (swap! global-state/state assoc :tag-on-edit true)
                     (when (false? (:show-keyboard @global-state/state))
                       (swap! global-state/state assoc :show-keyboard true))
                     (.requestFocus focus))
            .child
            (m/RotatedBox
             .quarterTurns 1
             .child
             (m/Text "+ tag" .style (m/TextStyle .fontSize 12))))))))
      (m/SizedBox .height 8)]
     (map #(tag-text-button
            (get % "name")
            (fn [] (tag-state/delete-draft-tag (get % "id"))))
          draft-tags)))))