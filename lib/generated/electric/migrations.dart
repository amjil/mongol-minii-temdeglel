// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: always_use_package_imports, depend_on_referenced_packages
// ignore_for_file: prefer_double_quotes

import 'package:electricsql/electricsql.dart';

const kSqliteMigrations = <Migration>[
  Migration(
    statements: [
      'CREATE TABLE "workspaces" (\n  "id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "name" TEXT,\n  CONSTRAINT "workspaces_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'workspaces\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_workspaces_primarykey;',
      'CREATE TRIGGER update_ensure_main_workspaces_primarykey\n  BEFORE UPDATE ON "main"."workspaces"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_workspaces_into_oplog;',
      'CREATE TRIGGER insert_main_workspaces_into_oplog\n  AFTER INSERT ON "main"."workspaces"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'workspaces\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'workspaces\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_workspaces_into_oplog;',
      'CREATE TRIGGER update_main_workspaces_into_oplog\n  AFTER UPDATE ON "main"."workspaces"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'workspaces\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'workspaces\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name"), json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_workspaces_into_oplog;',
      'CREATE TRIGGER delete_main_workspaces_into_oplog\n  AFTER DELETE ON "main"."workspaces"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'workspaces\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'workspaces\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name"), NULL);\nEND;',
    ],
    version: '20240624030117',
  ),
  Migration(
    statements: [
      'CREATE TABLE "drafts" (\n  "id" TEXT NOT NULL,\n  "workspace_id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "content" TEXT,\n  "flag" INTEGER NOT NULL,\n  "status" INTEGER NOT NULL,\n  "created_at" TEXT,\n  "updated_at" TEXT,\n  CONSTRAINT "drafts_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "workspaces" ("id") ON DELETE CASCADE,\n  CONSTRAINT "drafts_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'drafts\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_drafts_primarykey;',
      'CREATE TRIGGER update_ensure_main_drafts_primarykey\n  BEFORE UPDATE ON "main"."drafts"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_drafts_into_oplog;',
      'CREATE TRIGGER insert_main_drafts_into_oplog\n  AFTER INSERT ON "main"."drafts"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'drafts\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'drafts\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'content\', new."content", \'created_at\', new."created_at", \'electric_user_id\', new."electric_user_id", \'flag\', new."flag", \'id\', new."id", \'status\', new."status", \'updated_at\', new."updated_at", \'workspace_id\', new."workspace_id"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_drafts_into_oplog;',
      'CREATE TRIGGER update_main_drafts_into_oplog\n  AFTER UPDATE ON "main"."drafts"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'drafts\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'drafts\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'content\', new."content", \'created_at\', new."created_at", \'electric_user_id\', new."electric_user_id", \'flag\', new."flag", \'id\', new."id", \'status\', new."status", \'updated_at\', new."updated_at", \'workspace_id\', new."workspace_id"), json_object(\'content\', old."content", \'created_at\', old."created_at", \'electric_user_id\', old."electric_user_id", \'flag\', old."flag", \'id\', old."id", \'status\', old."status", \'updated_at\', old."updated_at", \'workspace_id\', old."workspace_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_drafts_into_oplog;',
      'CREATE TRIGGER delete_main_drafts_into_oplog\n  AFTER DELETE ON "main"."drafts"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'drafts\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'drafts\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'content\', old."content", \'created_at\', old."created_at", \'electric_user_id\', old."electric_user_id", \'flag\', old."flag", \'id\', old."id", \'status\', old."status", \'updated_at\', old."updated_at", \'workspace_id\', old."workspace_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS compensation_insert_main_drafts_workspace_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_drafts_workspace_id_into_oplog\n          AFTER INSERT ON "main"."drafts"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'drafts\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'workspaces\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."workspaces" WHERE "id" = new."workspace_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_drafts_workspace_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_drafts_workspace_id_into_oplog\n          AFTER UPDATE ON "main"."drafts"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'drafts\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'workspaces\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."workspaces" WHERE "id" = new."workspace_id";\n        END;\n      ',
    ],
    version: '20240624030127',
  ),
  Migration(
    statements: [
      'CREATE TABLE "tags" (\n  "id" TEXT NOT NULL,\n  "workspace_id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "name" TEXT,\n  "related_num" INTEGER,\n  CONSTRAINT "tags_workspace_id_fkey" FOREIGN KEY ("workspace_id") REFERENCES "workspaces" ("id") ON DELETE CASCADE,\n  CONSTRAINT "tags_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'CREATE TABLE "draft_tags" (\n  "id" TEXT NOT NULL,\n  "electric_user_id" TEXT NOT NULL,\n  "tag_id" TEXT NOT NULL,\n  "draft_id" TEXT NOT NULL,\n  CONSTRAINT "draft_tags_draft_id_fkey" FOREIGN KEY ("draft_id") REFERENCES "drafts" ("id") ON DELETE CASCADE,\n  CONSTRAINT "draft_tags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "tags" ("id") ON DELETE CASCADE,\n  CONSTRAINT "draft_tags_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'tags\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_tags_primarykey;',
      'CREATE TRIGGER update_ensure_main_tags_primarykey\n  BEFORE UPDATE ON "main"."tags"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_tags_into_oplog;',
      'CREATE TRIGGER insert_main_tags_into_oplog\n  AFTER INSERT ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'related_num\', new."related_num", \'workspace_id\', new."workspace_id"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_tags_into_oplog;',
      'CREATE TRIGGER update_main_tags_into_oplog\n  AFTER UPDATE ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'electric_user_id\', new."electric_user_id", \'id\', new."id", \'name\', new."name", \'related_num\', new."related_num", \'workspace_id\', new."workspace_id"), json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'related_num\', old."related_num", \'workspace_id\', old."workspace_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_tags_into_oplog;',
      'CREATE TRIGGER delete_main_tags_into_oplog\n  AFTER DELETE ON "main"."tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'tags\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'electric_user_id\', old."electric_user_id", \'id\', old."id", \'name\', old."name", \'related_num\', old."related_num", \'workspace_id\', old."workspace_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS compensation_insert_main_tags_workspace_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_tags_workspace_id_into_oplog\n          AFTER INSERT ON "main"."tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'workspaces\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."workspaces" WHERE "id" = new."workspace_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_tags_workspace_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_tags_workspace_id_into_oplog\n          AFTER UPDATE ON "main"."tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'workspaces\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."workspaces" WHERE "id" = new."workspace_id";\n        END;\n      ',
      'INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES (\'main\', \'draft_tags\', 1);',
      'DROP TRIGGER IF EXISTS update_ensure_main_draft_tags_primarykey;',
      'CREATE TRIGGER update_ensure_main_draft_tags_primarykey\n  BEFORE UPDATE ON "main"."draft_tags"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      		RAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
      'DROP TRIGGER IF EXISTS insert_main_draft_tags_into_oplog;',
      'CREATE TRIGGER insert_main_draft_tags_into_oplog\n  AFTER INSERT ON "main"."draft_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'draft_tags\', \'INSERT\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'draft_id\', new."draft_id", \'electric_user_id\', new."electric_user_id", \'id\', new."id", \'tag_id\', new."tag_id"), NULL, NULL);\nEND;',
      'DROP TRIGGER IF EXISTS update_main_draft_tags_into_oplog;',
      'CREATE TRIGGER update_main_draft_tags_into_oplog\n  AFTER UPDATE ON "main"."draft_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'draft_tags\', \'UPDATE\', json_patch(\'{}\', json_object(\'id\', new."id")), json_object(\'draft_id\', new."draft_id", \'electric_user_id\', new."electric_user_id", \'id\', new."id", \'tag_id\', new."tag_id"), json_object(\'draft_id\', old."draft_id", \'electric_user_id\', old."electric_user_id", \'id\', old."id", \'tag_id\', old."tag_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS delete_main_draft_tags_into_oplog;',
      'CREATE TRIGGER delete_main_draft_tags_into_oplog\n  AFTER DELETE ON "main"."draft_tags"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES (\'main\', \'draft_tags\', \'DELETE\', json_patch(\'{}\', json_object(\'id\', old."id")), NULL, json_object(\'draft_id\', old."draft_id", \'electric_user_id\', old."electric_user_id", \'id\', old."id", \'tag_id\', old."tag_id"), NULL);\nEND;',
      'DROP TRIGGER IF EXISTS compensation_insert_main_draft_tags_draft_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_draft_tags_draft_id_into_oplog\n          AFTER INSERT ON "main"."draft_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'drafts\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."drafts" WHERE "id" = new."draft_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_draft_tags_draft_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_draft_tags_draft_id_into_oplog\n          AFTER UPDATE ON "main"."draft_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'drafts\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."drafts" WHERE "id" = new."draft_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_insert_main_draft_tags_tag_id_into_oplog;',
      '        CREATE TRIGGER compensation_insert_main_draft_tags_tag_id_into_oplog\n          AFTER INSERT ON "main"."draft_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'tags\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."tags" WHERE "id" = new."tag_id";\n        END;\n      ',
      'DROP TRIGGER IF EXISTS compensation_update_main_draft_tags_tag_id_into_oplog;',
      '        CREATE TRIGGER compensation_update_main_draft_tags_tag_id_into_oplog\n          AFTER UPDATE ON "main"."draft_tags"\n          WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = \'main\' AND tablename = \'draft_tags\') AND\n               1 = (SELECT value from _electric_meta WHERE key = \'compensations\')\n        BEGIN\n          INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n          SELECT \'main\', \'tags\', \'COMPENSATION\', json_patch(\'{}\', json_object(\'id\', "id")), json_object(\'id\', "id"), NULL, NULL\n          FROM "main"."tags" WHERE "id" = new."tag_id";\n        END;\n      ',
    ],
    version: '20240624030134',
  ),
];
